Git Commands

git add : A multipurpose command - you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved. Takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.

git branch : List all the branches in your repository.

    git branch <branch> : Create a new branch called <branch>.

    git branch -a : List all remote branches.

    git branch -d <branch> : Delete the specified branch as long as it doesn't have unmerged files.

    git branch -D <branch> : Force to delete a specified branch.

    git branch -m <branch> : Rename the current branch to <branch>.

git checkout : Change working remote branch

    git checkout -b : Create a new branch on your local machine. [git brach + git checkout]

git clone : Gets a copy of an existing Git repository. Git receives a copy of nearly all data that the server has. Every version of every file for the history of the project is pulled down when you run git clone. [if your server disk get corrupted, you can use any of the clones on any client to set the server back to the state it was in when it was cloned] You clone a repository with git clone [url].

git commit : Launches your editor of choice. (set by your shell's EDITOR enviroment variable - you can configure it using the 'git config --global core.editor' command) The default commit message contains the latest output of the git status command commented out and one empty line on top. When you exit the editor, Git creates your commit with that commit message. Then your commit is created with your commit message stripped out of the default comments and diff.

    git commit -v : Shows the differences of your change in the editor so you can see exactly what chages you're committing.

    git commit -m "message" : Lets you enter your commit message to the right of the command instead of calling the editor.

    git commit -a : Makes git automatically stage every file that is already tracked before doing the commit, skipping the git add part.

git diff : Shows the exact lines added and removed but not yet staged. The command compares what is in your working directory with what is in your staging area. If you've staged all yout changes, git diff will give you no output.

    git diff --staged / git diff --cached : This command compares your staged changes to your last commit.

git init : This creates a new subdirectory named .git that contains all of your necessary repository files - a Git repository skeleton.

git log : Lists the commits [with its SHA-1 checksum, its author's name and email, the date written, and the commti message] made in that repository in reverse chronological order.

    git log --graph : This option adds a ASCII graph showing your branch and merge history.

    git log -p / git log --patch : Show the difference introduced in each commit. Displays the same information but with a diff firectly following each entry.

    git log --pretty : Change the log output to formats other than the default.

        git log --pretty=format : Allows you to specify your own log output format.
            %H : Commit hash
            %h : Abbreviated commit hash
            %T : Tree hash
            %t : Abbreviated tree hash
            %P : Parent hashes
            %p : Abbreviated parent hashes
            %an : Author name
            %ae : Author email
            %ad : Author date (format respects the--date=option)
            %ar : Author date, relative
            %cn : Committer name
            %ce : Committer email
            %cd : Committer date
            %cr : Committer date, relative
            %s : Subject

        git log --pretty=oneline : Prints each commit on a single line.

    git log --stat : Prints below each commit entry a list of modified files, how many files were changed, and how many lines in those files were added and removed. It also puts a summary of the information at the end.

git mv : Renames a file, unstage the file with the oldname and commit the change, then stage the file with the new name.

git remote add : add a new remote for your branch.

git rm : Stages a file removal. Removes the file from your staging area and working directory and then commit. You can pass it files, directories, and file-glob patterns.

    git rm -f : Removes a modified staged file. Prevents accidental removal of data that hasn't yet been recorded and can't be recovered from Git

git status : Determines which files are in which state, also tells you in which branch you're on.

    git status -s / git status --short : Show changesin a more compact way: 
        -new untracked files have a ?? next to them
        -new staged files have a A next to them
        -modified files have a M next to them
        -there are two columns to the output:
            -the left-hand column indicates the status of the staging area 
            -the right-hand column indicates the status of the working tree
