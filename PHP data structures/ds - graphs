Graphs

"A graph is a collection of verices or nodes that are connected to eachother through edges. These edges can be ordered or unordered, which means that the edge can have a direction associated with it or it can be non.directed, which is also known as bidirctional edge. [...] One of the significant differences between the graph and the tree data structures is that the graph can form a cycle or loop, but a tree data structure cannot. Unlike a tree data structure, we can start from any vertices in a graph data structure. Also, we can have a direct edge between any two vertices, whereas in a tree, two nodes can only be connected if the child node is the immediate descendant of the parent node." rahman (2017): 401

    Vertex
    "Each node in a graph is called a vertex. Usually, a vertex is represented a s a circle." rahman (2017): 403

    Edge
    "An edge is a connection between two vertices. Usually, it is represented by a line drawn between two vertices. [...] Edges can be of three types:
        -Direct edge: If an edge is marked with an arrow, then it indicates a direct edge. A direct edge is unidirectional. The head of the arrow is the end vertex and the tail of the arrow is the start vertex. [...]
        -Unidirected edge: An undirected edge is a connection between two vertices without any direction. This means that the edge satisfies a bidirectional relationship. [...]
        -Weighted edge: When an edge carries additional information, such as cost, distance, or other information, we call that edge a weighted edge. This is used for many graph algorithms." rahman (2017): 404-405

    Adjacent
    "Two vertices are adjacent if they have an edge in between them. Two vertices A and B are said to be adjacent if they have a direct edge between them." rahman (2017): 406

    Incident
    "An edge is incident on a vertex if the vertex is one of the end points of the edge. Also, two edges are incident if both of them share a vertex." rahman (2017): 407

    Indegree and outdegree
    "The total count of incoming edges to a particular vertex is known as the indegree of that vertex, and the total number of outgoing edges from a particular vertex is known as the outdegree of that vertex." rahman (2017): 408

    Path
    "A path is a sequence of vertices and edges that starts from a starting vertex and ends in another vertex that er are trying to reach." rahman (2017): 409

    Directed graphs
    "If a graph contains only directed edges, then the graph is known as a directed graph. A directed graph is also known as a digraph or a directed network." rahman (2017): 411

    Undirected graphs
    "If a graph contains undirected edges, then the graph is an undirected graph. In other words, the edhes in an undirected graph are bidirectional. Sometimes, the undirected graph is also known as an undirected network. In an undirected graph, if vertex A is connected to vertex B, then it is assumed that both (A,B) and (B,A) represent the same edge." rahman (2017): 412

    Weighted graphs
    "If all the edges of a graph are weighted edges, then the graph isknown as a weighted graph. Weighted graphs can be directed or undirected graphs- Each edge must have a value associated with it. The weight of an edge is always referred to as the cost of the edge." rahman (2017): 413

    Directed acyclic graphs (DAG)
    "An acyclic graph is a graph without a cycle or loop. If we want to visit other nodes from a particular node, we will not visit any of the nodes twice. A directed acyclic grph, popularly known as a DAG, is a directed graph that is acyclic. A directed acyclic graph has many usages in graphs algorithms. A directed acyclic graph has a topological ordering, where the ordering of the vertices is such that the starting endpoint of every edge occurs earlier in the ordering thantheending points of the edges." rahman (2017): 414

    Adjacency lists
    "We can represent a graph using a linked list where one array will be used fro vertices and each vertex will have a linked list, which will represent the edges between adjacent vertices." rahman (2017): 416

    Adjacency matrix
    "In an adjacency matrix, we represent the graph in a two-dimensional array, where each node represents the array index horizontally and vertically. If the edge from A to B is directional, then we mark that array index [A][B] to 1 to mark the connection; otherwise, it's 0. If the edge is not directional, then both [A][B] and [B][A] are set to 1. If the graph is weighted graph, then [A][B] or [B][A] will store the weight instead of 1." rahman (2017): 417

Breadth First Search and Depth First Search for graphs
"The difference between a tree implementation and a graph implementtion is that in a grph implementation, we can start from any vertex, whereas we start from the root of the tree data structure. Another important thing to consider is that our graphs can have cycles, which were absent in the tree, so, we cannot revisit a node or vertex as it will end up in an infinite loop." rahman (2017): 418

Topological sorting using Kahn's algorithm
"In topological sorting, a directed edge AB from vertex A to B is sorted in such a way that A will always come before B in the ordering. This will be applicable for all the vertices and edges. Another important factor for applying a topological sort is that the graph must be a DAG. Any DAG has at least one topological sorting. Most of the time, there are multiple topologcal sortings that are possible for a given graph. There are two popular algorithms avaliable for topological sorting: Kahn's algorithm and the DFS approach." rahman (2017): 426

    Kahn's algorithm
    "Kahn's algorithm has the following steps to find the topological ordering from a DAG:
        1. Calculate the indegree (incoming edges) for each of the vertex and put all vertices in a queue where the indegree is 0. Also, initialize the count for the visited node to 0.
        2. Remove a vertex fromthe queue and perform the following operations on it:
            1. Increment the visited node count by 1.
            2. Reduce the indegree for all adjacent vertices by 1.
            3. If the indegree of the adjacent vertex becomes 0, add it to the queue.
        3. Repear step 2 until the queue is empty.
        4. If the count of the visited node is not the same as the count of the nodes, then topological sorting is not possible for thegiven DAG." rahman (2017): 426-427