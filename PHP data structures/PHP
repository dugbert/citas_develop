PHP

PHP/FI: Beginning
"The genesis of PHP [...] lies with two tools developed by Rasmus Lerdorf using Perl. PHP stood for PErsonal Homepage Tools. FI stood for Form Interpreter. Together, they comprised macros for sending SQL statements to databases, processing forms, and flow control. These tools were rewritten in C and combined under the name PHP/FI 2.0. The language at this stage looked different from the syntax we recognize today, but not that different. There was support for variables, associative arrays, and functions. Objects, however, were not even on the horizon." zandstra (2016): 9

Syntactic Sugar
"In fact, even as PHP 3 was in the planning stage, objects were off the agenda. Theprincipal architects of PHP 3 were Zeev Suraski and Andi Gutmans. PHP 3 was a complete rewrite of PHP/FI 2.0, but objects were not deemed a necessary part of the new syntax. According to Zeev Suraski, support for classes was added almost as an afterthought (on 27 August 1997, to be precise). Classes and objects were actually just another way to define and access associative arrays." zandstra (2016): 9-10

    "Of course, the addition of methods and inheritance made classes much more than glorified associative arrays, but there were still severe limitations on what you might do with your classes. In particular, you could not access a parent class's overridden methods. Another disadvantage [...] was the less than optimal way that objects were passed around in PHP scripts.The objects were a marginal issue at this time id underlined by their lack of prominence in official documentation. Themanual devoted one sentece and a code example to objects. The example did not illustrate inheritance or properties." zandstra (2016): 10

PHP 4 and the Quiet Revolution
"From our objective perspective, the fact that PHP 4 made it possible to override parent methods and access them from child classes wasa major benefit. A major drawback remained, however. Assigning and object to a variable, passing it to a function, or returning it from a method resulted in a copy being made. [...] In most object-oriented languages, you would expect assignment by reference rather than by value. This means that you would pass and assign handles that point to objects rather than copy the objects themselves. The default pass-by-value behavior resulted in many obscure bugs as programmers unwittingly modified objects in one part of a script, expecting the changes to be seen via references elsewhere. [...] Luckily, there was a way of enforcing pass-by-reference, but it meant remembering to use a clumsy construction." zandstra (2016): 10

    Zend Engine
    "If PHP 4 was yet anther ground breaking step for the language, most of the core changes took place beneath the surface. The Zend Engine (its name us derived from Zeev and Andi) was written from scratch to power the language. The Zend Engine is one of the main components that drive PHP. Any PHP function you might care to call is in fact a part of the high-level extensions layer. These do the busy work they were named for, like talking to database APIs or juggling strings for you. Beneath that, Zend Engine manage memory, delegates control to other components, and translates the familiar PHP syntax you work with everyday into runnable bytecode. It is the Zend Engine that we have to thank for core language features like classes." zandstra (2016): 10

    Object controversy
    "Coverage of syntax in general, and objects in particular, was extended in the PHP manual, and object-oriented coding began to bubble up to the mainstream. Objects in PHP were not uncontroversial [...] Indeed, the Zend site played host to articles that encouraged object-oriented programming side-by-side with others that sounded a warning note. Pass-by-reference issues and controversy notwithstanding, many coders just got on and peppered their code with ampersand characters. Object-oriented PHP grew in popularity." zandstra (2016): 11

        Zeev Suraski on PHP object-oriented programming
        "One of the biggest twists in PHP's history was that despite the very limited functionality and despite a host of problems and limitations, object-oriented programming in PHP thrived and became the most popular paradigm for the growing numbers of off-the-shelf PHP applications. This trend, which was mostly unexpected, caught PHP in an suboptimal situation. It became apparent that objects were not behaving like objects in other OO languages, and were instead behavind like [associative] arrays." zandstra (2016): 11

    "[...] interest in object-oriented design became obvious in sites and articles online. PHP's official software repository, PEAR, itself embraced object-oriented programming. With hindsight, it's easy to think of PHP's adoption of object-oriented support as a reluctant capitulation to an inevitable force. It's important to remember that, although object-oriented programming has been around since the 1960s, it really gained ground in the mid-1990s. Java, the great popularizer, was not realesed until 1995. A super ser of C, a procedural language, C++ has been around since 1979. After a long evolution, ir arguably made the leap to the big time during the 1990s. Pearl 5 was released in 1994, another revolution within a formerly procedural language that made it possible for its users to think in objects. For smal procedural language, PHP developed its object support remarkably fast, showing a real responsiveness to the requirements of its users." zandstra (2016): 11

Change Embraced: PHP 5
"PHP 5 represented an explicit endorsement of objects and object-oriented programming. That is not to say that objects were the only way to work with PHP. Objects were, however, recognized as a powerful and important means for developing enterprise systems, and PHP fully supported them in its core design." zandstra (2016): 11

    "Arguably, one significant effect of the enhancements in PHP 5 was the adoption of the language by larger Internet companies. Both Yahoo! and Facebook, for example, started using PHP extensively within their platforms. With version 5, PHP became one of the standard languages for development and enterprise on the internet." zandstra (2016): 11

    Pass-by-reference
    "Objects had moved from afterthought to language driver. PErhaps the most important change was default pass-by-reference behavior which replaced the evils of object copying. That was only the beginning, however. [...] many more enhancements, including private and protected methods and properties, the static keyword, namespaces, type hints (now called type declarations), and exceptions. PHP 5 was around for a long time (about twelve years), and important new features were released incrementally." zandstra (2016): 12

PHP 7: Closing the Gap
"Programmers are a demanding lot. Formany lovers of design patterns, there were two key features that PHP still lacked. These were scaler type declarations and enforced return types. With PHP 5 it was possible to enforce the tyoe of an argument passed to a function or method, so long as you only needed to require an object, an array, or later, callable code. Scalar values (like integers, strings, and floats) could not be enforced at all. Furthermore, if you wanted to declare a method or a function's return type, you were altogether out of luck." zandstra (2016): 12

    "[...] object oriented design often uses a method declaration as a kind of contract. The method demands certain inputs and, reciprocally, it promises to give you a apticular type of data back. PHP 5 programmers were enforced to rely on comments, conventions, and manual type checking to maintain contracts of this kind in many cases. Developers and commentators often complained about this." zandstra (2016): 12

The Object Debate
"Objects and object-oriented design seem to stir passions on both sides of the enthusiasm divide. Many excellent programmers have produced excellent code for years without using objects, and PHP continues to be a superb plataform for procedural web programming. [...] Wether a developer chose to work with PHP as an object-oriented language was once a matter of preference. This is still true to the extent that one can create perfectly acceptable working systems using functions and global code. Some great tools (e.g. WordPress) are still procedural in their underlying architecture. IT is however, becoming increasingly hard to work as a PHP programmer without using and understanding PHP's support for objects, not least because the third party libraries you are likely to rely upon in your projects will themselves likely be object-oriented." zandstra (2016): 12-13

