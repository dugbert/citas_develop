

Classes
"In short, a class is a code template used to generate one or more objects. You declare a class with the class keyword and an arbitrary class name. Class names can be any combination of numbers and letters, although they must not begin with a number. The code associated with a class must be enclosed within braces." zandstra (2016): 15

"Basic class definitions begin with the keyword class, followed by a class name, followed by a pair of curly braces which enclose the definitions of the properties and methods belonging to the class. The class name can be any valid label, provided it is not a PHP reserved word. A valid class name starts with a letter or underscore, followed by any number of letters, numbers, or underscores." http://php.net/manual/en/language.oop5.basic.php

    Properties and methods
     "Class properties and methods live in separate "namespaces", so it is possible to have a property and a method with the same name. Referring to both a property and a method has the same notation, and whether a property will be accessed or a method will be called, solely depends on the context, i.e. whether the usage is a variable access or a function call [...] calling an anonymous function which has been assigned to a property is not directly possible. Instead the property has to be assigned to a variable first, for instance. As of PHP 7.0.0 it is possible to call such a property directly by enclosing it in parentheses." http://php.net/manual/en/language.oop5.basic.php

        Visibility
        "Elements in your classes can be declared public, private, or protected:
            -Public properties and methods can be accessed from any context.
            -A private method or property can only be accessed from within the enclosing class.
            -A protected method or property can only be accessed from within either the enclosing class or from a subclass. No external code is granted access.
        Visibility keywords allow you to expose only those aspects of a class that are required by a client. This sets a clear interface for your object. By preventing a client from accessing certain properties, access control can also help prevent bugs in your code." zandstra (2016): 41

            "This declaration may include an initialization, but this initialization must be a constant value--that is, it must be able to be evaluated at compile time and must not depend on run-time information in order to be evaluated." http://php.net/manual/en/language.oop5.basic.php

            Private
            "Setting properties to private can be an overzealous strategy. A private property cannot be accessed by a child class." zandstra (2016): 42

            Protected
            "Remember that a protected property or method cannot be accessed from outside the class hierarchy in which it was declared. It can only be accessed from within its originating class or from within children of the originating class." zandstra (2016): 42

            Side on privacy
            "As a general rule, err on the side of privacy. Make properties private or protected at first and relax your restriction onlyas needed. Many (if not most) methods in your classes will be public, but one again, if in doubt, lock it down. A method that provides local functionality for tother methods in yur class has no relevance to your class's users. Make it private or protected." zandstra (2016): 42

        Properties
        "Classes can define special variables called properties. A property, also known as a member variable, holds data that can vary from object to object. [...] A property in a class looks similar to a standard variable except that, in declaring a property, you must precede the property variable with a visibility keyword. This [...] determines the scope from which the property can be accessed." zandstra (2016): 17

            Constant Properties
            "Some properties should not be changed. [...] Error and status flags will often be hard-coded into your classes. Although they should be publicly and statically available, client code should not be able to change them. PHP allows you to define constant properties within a class. Like global constants, class constants cannot be changed once they are set. A constant property is declared with the const keyword. Constants are not prefixed with a dollar sign like regular properties. By convention, they are often named using only uppercase characters." zandstra (2016): 51

                Only primitive values
                "Constant properties can contain only primitive values. You cannot assign an object to a constant. Like static properties, constant properties are accessed through the class and not an instance. Just as you define a constant without a dollar sign, no leading symbol is required when you refer to one. [...] Attempting to set a value on a constant once it has been declared will cause a parse error. You should use constants when your property needs to be avaliable across all instances of a class, as well as when the property value need to be fixed and unchanging." zandstra (2016): 51

        Methods
        "Just as properties allow your objects to store data, methods allow your objects to perform tasks. Methods are special functions declared within a class. [...] a method declaration resembles a function declaration. The function keyword precedes a method name, followed by an optional list of argument variables in parentheses." zandstra (2016): 19

            Difference with properties
            "Unlike functions, methods must be declared in the body of a class. They can also accept a number of qualifiers, including a visibility keyword. Like properties, methods can be declared public, protected, or private. By declaring a method public, you ensure that it can be invoked from outside of the current object. If you omit the visibility keyword in your method declaration, the method will be declared public implicitly. It is considered good practice, however, to declare visibility explicity for all methods." zandstra (2016): 19

            Invoking a method
            "In most circumstances, you will invoke a method using an object variable in conjunction with the object operator, ->, and the method name. You must use parentheses in your method call as you would if you were calling a function (even if you are not passing any arguments to the method)." http://php.net/manual/en/language.oop5.basic.php

    Objects
     "If a class is a template for generating objects, it follows that an object is data that has been structured according to the template defined in a class. An object is said to be an instance of its class. It is of the type defined by the class. [...] Every object that is created in a PHP script is also given its own unique identifier. (Note that the identifier is unique for the life of the object; that is, PHP reuses identifiers, even within a process)."zandstra (2016): 16

        Instantiation
        "To create an instance of a class, the 'new' keyword must be used. An object will always be created unless the object has a constructor defined that throws an exception on error. Classes should be defined before instantiation (and in some cases this is a requirement). If a string containing the name of a class is used with new, a new instance of that class will be created. If the class is in a namespace, its fully qualified name must be used when doing this." http://php.net/manual/en/language.oop5.basic.php

            "In the class context, it is possible to create a new object by new self and new parent. When assigning an already created instance of a class to a new variable, the new variable will access the same instance as the object that was assigned. This behaviour is the same when passing instances to a function. A copy of an already created object can be made by cloning it." http://php.net/manual/en/language.oop5.basic.php

        Permeability
        "Scopes refers to the function or class context in which a variable has meaning (it refers in the same way to methods). So a variable defined in a function exists in local scope, and a variable defined outside of the function exists in global scope. As a rule of thumb, it is not possible to acces data defined in a scope that is more local than the current one. So if you define a variable inside a function, you cannot later access it from outside that function. Objects are more permeable than this, in that some object variables can sometimes be accessed from other contexts. Which variables can be accessed and from what context is determined by the public, protected, and private keywords." zandstra (2016): 17"

        Constructor method
        "A constructor method is invoked when an object is created. You can use it to set things up, ensuring that essential properties are assigned values and any necessary preliminary work is completed. [...] the method name begins with two underscore characters. You will see this naming convention for many other special methods in PHP classes. [...] The __construct() method is invoked when an object is created using the 'new' operator. [...] The constructor method uses the pseudo-variable $this to assign values to each of the object's properties." zandstra (2016): 21-22

            $this
            "The pseudo-variable $this is available inside any class method when that method is called from within an object context. $this is a reference to the calling object (usually the object to which the method belongs, but possibly another object, if the method is called statically from the context of a secondary object)." http://php.net/manual/en/language.oop5.basic.php

        Destructor method
        "PHP 5 also introduced the __destruct() method. This is invoked just before an object is garbage-collected; that is, before it is expunged from memory. You can use this method to perform any final cleaning up that might be necessary." zandstra (2016): 86

    Static vs non-static
     "Within class methods non-static properties may be accessed by using -> (Object Operator): $this->property (where property is the name of the property). Static properties are accessed by using the :: (Double Colon): self::$property." http://php.net/manual/en/language.oop5.basic.php
            
        Static: class context
        "Declaring class properties or methods as static makes them accessible without needing an instantiation of the class. A property declared as static cannot be accessed with an instantiated class object (though a static method can)." http://php.net/manual/en/language.oop5.basic.php

        "You can access both methods and properties in the context of a class rather than that of an object. Such methods and properties are "static" and must be declatred as such by using the static keyword." zandstra (2016): 47

            No varaible needed
            "Static methods are functions with class scope. They cannot themselves access any normal properties in the class because these would belong to an object; however, they can access static properties. If you change a static property, all instances of that class are able to access the new value. Because you access a static element via a class and not an instance, you do not need a variable that references an object. Instead, you use the class name in conjuction with ::." zandstra (2016): 48

            'self' keyword
            "Class code can use the parent keyword to access a superclass without using its class name. To access a static method or property from within the same class (rather than from a child), I would use the self keyword. self is to classes what the $this pseudo-variable is to objects." zandstra (2016): 48

                "By definition, static methods and properties are invoked on classes and not objects. For this reason they are often referred to as class variables and properties. As a consequence of this class orientation, you cannot use the $this pseudo-variable inside a static method." zandstra (2016): 49

                "Because static methods are callable without an instance of the object created, the pseudo-variable $this is not available inside the method declared as static." http://php.net/manual/en/language.oop5.basic.php

            Static reference to a nonstatic method
            "Making a method call using parent is the only circumstance in which you should use a static reference to a nonstatic method. Unless you are accessing an overriden method, you should only ever use :: to access a method or property that has been explicitly devlared static. In documentation, however, you will often see static syntax used to refer to a method or property. This does not mean that the item in question is necessarily static, just that it belongs to a certain class." zandstra (2016): 48

            Static elements features
            "Static elements have a number of characteristics that can be useful. First, they are avaliable from anywhere in your script (assuming that you have access to the class). This means you can access functionality without needing to pass an instance of the class from object ot object or, worse, sorting an instance in a global variable. Second, a static property is avaliable to every instance of a class, so you can set values that you want to be avaliable to all members of a type. Finally, the fact that you don't need an instance to access a static property or method can save you from instantiating an object purely to get at a simple function." zandstra (2016): 49

Types
"Type determines the way data can be managed in your scripts. You use string type to display character data, for example, and manipulate such data with string functions. Integers are used in mathematical expressions, Booleans are used in test expressions, and so on. This categories are known as primitive types. On a higher level, though, a class defines a type." zandstra (2016): 22

"There is a key difference between the two [types and classes], however. When you define a class, you also define a type, but a type can describe an entire family of classes. The mechanism by which different classes can be grouped together under a type is called inheritance." zandstra (2016): 30

    Inheritance
    "Inheritance is the means by which one or more classes can be derived from a base class. A class that inherits from another is said to be a subclass of it. This relationship is often described in terms of parents and children. A child class is derived from and inherits characteristics from the parent. These characteristics consist of both properties and methods. The child class will typically add new functionality to that provided by its parent (also known as a superclass); for this reason, a child class is said to extend its parent." zandstra (2016): 30

    "By defining a class that extends another you ensure that an object instantiated from it is defined by the characteristics of first the child and then the parent class." zandstra (2016): 37

        extends
        "A class can inherit the methods and properties of another class by using the keyword 'extends' in the class declaration. It is not possible to extend multiple classes; a class can only inherit from one base class. The inherited methods and properties can be overridden by redeclaring them with the same name defined in the parent class. However, if the parent class has defined a method as final, that method may not be overridden. It is possible to access the overridden methods or static properties by referencing them with parent::. When overriding methods, the parameter signature should remain the same or PHP will generate an E_STRICT level error. This does not apply to the constructor, which allows overriding with different parameters." http://php.net/manual/en/language.oop5.basic.php

            "Each child class invokes the constructor of its parent before setting its own properties. The base class [...] knows only about its own data. Child classes are generally specializations of their parents. As a rule of thumb, you should avoid giving parent classes any special knowledge about their children." zandstra (2016):40

            Passing arguments
            "When you define a constructor in a child class, you become responsible for passing any arguments on to the parent. If you fail to do this, you can end up with a partially constructed object. To invoke a method in a parent class, you must fisrt find a way of referring to the class itself: a handle PHP provides us with the 'parent' keyword for this purpose. To refer to a method in the context of a class rather than an object, you use :: rahter than ->." zandstra (2016): 38

        Invoking an overriden method
        "The parent keyword can be used with any method that overrides its conterpart in a parent class. When you override a method, you may not wish to obliterate the functionality of the parent, but rather to extend it. You can achieve this by calling the parent class's method in the curent object's context." zandstra (2016): 40

    Primitive types
    "PHP is a loosely typed language. This means that there is no necessity for a variable to be declared to hold a particular data type. [..] In strongly typed languages, such as C or Java, you must declare the type of a variable before assigning a value to it, and, of course, the value must be of the specified type. This does not mean that PHP has no concept of type. Every value that can be assigned to a variable has a type. You can determine the type of a variable's value using one of PHP's type-checking functions. [...] Each function accepts a variable or value and returns true if this argument is of the relevant type." zandstra (2016): 22

        Type checking functions
        is_bool()       boolean     One of the two special values, true or false
        is_integer()    integer     A whole number. Aliasof is_int() ans is_long()
        is_double()     double      A floating point number (a number with a decimal point). Alias of is_float()
        is_string()     string      Character data
        is_object()     object      An object
        is_array()      array       An array
        is_resource()   resource    A handler for identifying and working with external resources such as databases or files
        is_null()       null        An unassigned value

    "[...] your strategies for dealing with argument types will depend on the seriousness of any potential bugs on the one hand, and the benefits of flexibility on the other. PHP casts most primitive values for you, depending on context. Numbers in strings are converted to their integer or floating point equivalents when used in a mathematical expression, for example. So your code might be naturally forgiving of type errors. If you expect one of your method arguments to be an array, however, you may need to be more careful. Passing a nonarray value to one of PHP's array functions will not produce a useful result and could cause a cascade of errors in your method." zandstra (2016): 26

    "The fact that PHP is loosely typed makes it all the more important. You cannot rely on a compiler to prevent type-related bugs; you must consider the potential impact of unexpected types when they find their way into your arguments. You cannot afford to trust client coders to read your thoughts, and you should always consider how your methods will deal with incoming garbage." zandstra (2016): 26

        Type declarations
            array               An array. Can default to null or an array
            int                 An integer. Can default to null or an integer
            float               A floating point number. An integer will be accepted -even with strict mode enabled. Can default to null, a float, or an integer
            callable            Callable code (such as an anonymous function). Can default to null
            bool                A Boolean. Can default to null or a Boolean.
            string              Character data. Can default null or a string.
            self                A reference to the containing class
            [a class type]      The type of a class or interface. Can default to null

        Flexibility
        "Method and function definitions do not necessarily require that an argument should be of a particular type. This is both a curse and a blessing. The fact that an argument can be if any type offers you flexibility. You can build methods that respond intelligently to different data tyoes, tailoring functionality to changing circumstances. This flexibility can also cause ambiguity to creep into code when a method body expects an argument to hold one type but gets another." zandstra (2016): 22

Abstract classes
"An Abstract class provides concrete base functions as well as abstract functions that must be implemented by concrete child classes—binding them into a contract so to speak, if they wish to make use of the base functionality. This is a subtle but important point and this is where abstract classes really shine. They can call abstract functions from within base concrete functions." http://php.net/manual/en/language.oop5.basic.php

"An abstract class cannot be instantiated. Instead it defines (and, optionally, partially implements) the interface for any class that might extend it. You define an abstract class with the abstract keyword." zandstra (2016): 51

        "In most cases, an abstract class will contain at least one abstract method. These are declared, once again, with the abstract keyword. An abstract method cannot have an implementation. You declare it in the normal way, but end the declaration with a semicolon rather than a method body." zandstra (2016): 52

        "In creating an abstract method, you ensure that an implementation will be avaliable in all concrete child classes, but you leave the details of that implementation undefined." zandstra (2016): 52

        "So any class that extends an abstract class must implement all abstract methods or itself be declared abstract. An extending class is responsible for more than simply implementing an abstract method. In doing so, it must reproduce the method signature. This means thatthe access control of the implementing method cannot be stricter than that of the abstract method. The implementing method should also require the same number of arguments as the abstract method, reproducing any class type hinting." zandstra (2016): 52

        Characteristics of abstract classes:
            -Single inheritance. Child classes can extend only one class at a time.
            -Abstract classes cannot be instantiated — no new Animal();
            -Abstract classes can define class variables of type const only.
            -Abstract class A can be extended by another abstract class B. Abstract class B can implement none or any of the abstract functions in A.
            -In the previous case, a child class C which extends abstract class B must implement all abstract functions in B as well as the abstract functions in A which have not already been implemented in B.
            -The signature of the concrete functions and abstract functions must be the same. However, if an abstract function is defined as 'abstract function speak($greeting)'; then it is okay to implement it as 'function speak($greeting, $shout = FALSE)'' but not 'function speak($greeting, $shout)'.
            -The visibility of functions in the child classes must be the same or less restrictive than the parent class. Thus, a protected abstract function can be implemented as either protected or public but not private.
            -Declaring functions as static abstract throws a strict warning in PHP 5.2 or earlier, however, as of PHP 5.3 this is allowed.

    Anonymoous Classes
    "As of PHP 7 you can declare anonymous classes as well as functions. These are expecially useful when you need to create and derive an isntance from a small class. This is especially useful when the class in question is simple and specific to the local context." zandstra (2016): 95

        "[...] you can declare an anonymous class with the keywords, new class. You can then add any extends and implements clauses required before creating the class block. Anonymous classes do not support closures. In other wordsm variables declared ina wider scope cannot be accessed within the class. However you can pass calues to an anonymous class's constructor." zandstra (2016): 96

        "[...] if your anonymous class begins to grow in size and complexity, it becomes more sensible to create a named class in a class file. This is especially true if you find yourself duplicating your anonymous class in more than one place." zandstra (2016): 97

        