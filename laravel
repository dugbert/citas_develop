Laravel

SOLID design principle
 "SOLID consists of the five design principles articulated by Robert “Uncle Bob” Martin.[...] SOLID stands for
	1)	Single Responsibility Principle
	2)	Open Closed Principle
	3)	Liskov Substitution Principle
	4)	Interface Segregation Principle
	5)	Dependency Inversion Principle" sinha (2017): 17-18

	Single responsibility principle (classes)
	 "The Single Responsibility Principle means a class should have one, and I mean only one, reason to change. Limiting class knowledge is important. The class’s scope should be narrowly focused. A class would do its job and not be affected at all by the change that takes place on its dependencies. Remember, if we can build a library of small classes with well-defined responsibilities, our code will be more decoupled and easy to test and run." sinha (2017): 18

	 "[...] the single responsibility principle. It states that a class should have a single responsibility. 1 A good practice to follow is to list the responsibility of the class in the comment doc-blocks. This way you can remind yourself and others the purpose of this class and try to keep the responsibility minimal. [...] Don’t take the single responsibility principle too far. The less change a class experiences, the less all these principles really matter. [...] Remember that using principles has trade-offs. If it is easier to maintain one larger class rather than five decoupled smaller classes, don’t fight the tide. Encapsulate what varies and leave the rest alone." dockins (2017): 9-10

	Open/closed principle (classes)
	 "The Open Closed Principle means a class is always open for extension but closed for modification. How is that? Nothing except that any changes to behavior should be made without modification of source codes. If you can do your job without touching the source code, then you are following the Open Closed Principle!" sinha (2017): 18

	 "[...] the Liskov substitution principle, which is tough considering PHP is a duck-typed language. It doesn’t have strict variable types. However, PHP does have type-hinting [...] Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program [...]" dockins (2017): 12

	Liskov substitution principle (classes)
	 "Derived classes must be substitutable for their based class. It means objects should be replaceable with instances of their subtypes without altering the correctness of program." sinha (2017): 18

	Interface segregation principle (interfaces)
	 "The Interface Segregation Principle is an echo of Singular Responsibilities. If it is broken, Singular Responsibility is broken. In a nutshell, it says that interface is granular and focused. No implementation of interface should be forced on methods that it does not use. Accordingly, break into small interfaces as you require them for your implementation. Plan it before and enjoy the decoupled easy-going ride." sinha (2017): 18

	Dependency inversion principle (highlevel-code)
	 "[...] the Dependency Inversion Principle states that high­level codes should not depend on low­level codes. Instead the high­level code depends on ‘Abstraction’ that acts as a middle-man between high­level and low­level. The second aspect is that abstraction does not depend upon details but details depend upon abstractions." sinha (2017): 18

	 "The DIP (dependency inversion principle) states that one should depend on abstractions instead of concretions." dockins (2017): 15

	 "In software engineering, there is a saying: low coupling, high cohesion. Coupling is the degree to which one class relies on another class. Cohesion is the degree to which elements inside a class belong together. [...] To mitigate cohesion and coupling issues, follow the practice that high-level classes should not depend on low-level classes and vice versa. Instead, depend on abstractions such as an interface, abstract class, etc." dockins (2017): 16

JSON
 "JSON stands for JavaScript Object Notation. It was named this way because JavaScript was the first language to take advantage of the format. Essentially, JSON is a human readable method of storing arrays and objects with values as strings. It is used primarily for data transfer, and is a lot less verbose than some of the other options such as XML. Commonly it is used when the front-end part of your application requires some data from the back-end without a page reload. This is normally achieved using JavaScript with an AJAX request." rees (2013): 7-8

	JSON Synthax
	"By default JSON is stored without any white space between its values which might make it a little more difficult to read.
	This is normally to save on bandwidth when transferring the data. Without all the extra whitespace, the JSON string will be much shorter and thus be less bytes to transfer.
	The good news is that JSON doesn’t care about whitespace or line breaks between its keys and values." rees (2013): 8

	Data transfer format
	"JSON doesn’t support commenting since it’s used for data transfer." rees (2013): 10

	"JSON is a data transfer format, and not a language. It has no concept of variables. This is why you don’t need the assignment within the JSON snippet.
	The method of representing an object literal is very similar. This is no coincidence! [...] JSON was originally invented for use with JavaScript.
	In both JSON and JavaScript, objects are contained within { two curly braces } and consist of key-value pairs of data." rees (2013): 9

		JavaScript vs JSON
		"In the JavaScript variant the keys didn’t require quotes because they represent variables, but we just heard that JSON doesn’t have variables. This is fine since we can use strings as keys, and that’s exactly what JSON does to work around this problem.
		You may also have noticed that I used single quotes around the JavaScript values. This is a trap! That behaviour is perfectly acceptable with JavaScript, but JSON strings must be contained within double quotes.
		In both JavaScript and JSON, key-value pairs must be separated with a colon ( : ), and sets of key-value pairs must be separated with a comma ( , ).
		JSON will support strings and numerical types." rees (2013): 9-10

		Value-type support
		"JSON will allow the following value types.
		Double
		Float
		String
		Boolean
		Array
		Object
		Null" rees (2013): 10

		"Numeric values are represented without quotes. [...]
		Booleans are represented by the words true and false , both without quotes much like PHP itself. [...] string values are contained within double quotes and not single quotes.
		The null value works in a similar way to PHP, and is represented by the word null without quotes.
		We have seen objects. Much like the main JSON object itself, they are wrapped with curly braces and can contain all sorts of value types.
		Arrays once again look very similar to their JavaScript counterpart." rees (2013): 10

Composer
 "Composer expects its configuration to live at the root of your package along with the filename composer.json ." rees (2013): 13

	Packages
	"The tool that you are building is called a package. Imagine a little box containing everything needed to run your application, and describe it." rees (2013): 13

	"The package name consists of two words separated by a forward slash ( / ). The part before the forward slash represents the owner of the package. [...] The second part of the name string is the package name. Keep it simple and descriptive." rees (2013): 14-15

Interfaces and method injection
 "Interfaces can save us by encapsulating the actual logic. We are safe. As we don’t want to hit the database directly from our Controller class, we keep a shield in between them, namely, Interfaces. It will act as a medium between Eloquent ORM and Controller. [...] An Interface defines the syntactical contract that all the derived classes should follow. Specifically, the interface defines the ‘what’ part of the syntactical contract and the derived classes will describe the ‘how’ part of the contract." sinha (2017): 33

	Multiple interfaces
	"You can use several interfaces between them; don’t worry about using them throughout your application. The more you use it, the better. Some people may object to the extra typing, but personally I think that using Interfaces would make your application more robust and agile. You can test them without hitting your domain logic from your web layer." sinha (2017): 34

	Abstract classes
	"Classes defined as abstract may not be instantiated and any class that contains at least one abstract method must also be abstract. Remember that abstract methods can not define the implementation." sinha (2017): 19

	Object interfaces
	"[...] object interfaces allow you to create code which specifies which methods a class must implement, without having to define how these methods are handled. Interfaces are defined with the interface keyword, in the same way as a standard class, but without any of the methods having their contents defined. All methods declared in an interface must be public; this is the nature of an interface." sinha (2017): 19

URL generation
 "Your web application revolves around routes and URLs. After all, they are what direct your users to your pages. At the end of the day, serving pages is what any web application must do. [...] In order to construct hyper links we need to build URLs to our application." rees (2013): 114

	Current URL
	"Getting the current URL in Laravel is easy. Simply use the URL::current() helper. [...] the result of URL::current() strips off the extra request data [...] the URL::full() method also includes additional request data. [...] after [a] redirect, the URL::previous method gives the URL for the previous request, which [...] is the URL to the first route." rees (2013): 114-115-116

	Generating framework URLs
	"[...] generating URLs to specific URI’s. We can do this using the URL::to() method. [...] Laravel [builds] a URL to the route we requested. You should note that [this route] doesn’t exist, but we can link to it anyway. Make sure that you remember this when generating links to URIs. You can specify additional parameters to the URL::to() method in the form of an array. These parameters will be appended to the end of the route." rees (2013): 116

		HTTPS protocol
		"If you want your generated URLs to use the HTTPS protocol, then you have two options. The first option is to pass true as the third parameter to the URL::to() method [...] However, if you don’t want to provide parameters to your URL, you will have to pass an empty array, or null as the second parameter. Instead, it’s more effective to use the descriptive URL::secure() [...] you can pass an array of route parameters as the second method parameter to the URL::secure() method [...] " rees (2013): 117

		URL::route()
		"Laravel has taken our route nickname, and found the associated URI. If we were to change the URI, the output would also change. This is very useful for avoiding having to change a single URI for many views. Just like the URL::to() method, the URL::route() method can accept an array of parameters as the second method parameter. Not only that, but it will insert them in the correct order within the URI. [...] Laravel will fill in the blanks in the correct order, with the parameters we have provided." rees (2013): 118-119

		URL::action()
		"[...] the URL::action() method. The first parameter of this method is the Class and action combination that we wish to retrieve the URL for. The format for this parameter is identical to that which we use for routing to controllers. Laravel [identifies] the URL for the controller action pair that we [request], and [delivers] it as a response. Just as with the other methods, we can supply an array of parameters as a second parameter to the URL::action() method." rees (2013): 119-120

	Asset URLs
	"URLs to assets such as images, CSS files and JavaScript need to be handled a little differently. " rees (2013): 120-121

		URL asset()
		"Laravel [creates] an absolute asset path for us. If we want to use a secure HTTPS protocol to reference our assets, then we can pass true as a second parameter to the URL::asset() method. [...] Laravel also provides a much more descriptive method of generating secure asset URLs. Simply use the URL::secureAsset() method and pass the relative path to your asset." rees (2013): 121-122

	Generation Shortcuts
	"First we have the url() function. It accepts identical parameters to the URL::to() method [...] The secure_url() function accepts the same signature as the URL::secure() method. The first parameter is the route, and the second is an array of route parameters to be appended. The route() function is a shortcut to the URL::route() method, and be used for generating URLs to named routes. [...] The action() function can be used as a shortcut to the URL::action() method, and can be used to generate links to controller actions. [...] they can accept second and third parameters for route parameters and secure URL generation. [...] The shortcut to the URL::asset() method is the asset() function, and as with all the other shortcuts, it accepts identical function parameters. [...] the shortcut to URL::secureAsset() is the secure_asset() function." rees (2013): 122-123

MVC to DDD
"Laravel has evolved in just two short years [4-5], moving away from CodeIgniter's Model-View-Controller paradigm to adopt modern Domain-driven design's command bus and publisher subscriber event listener pattern. Wheter or not to use these patterns will depend on the amount of separation that is desired between each layer. Certainly, even using a self-handling command is a start toward creating completely independent blocks of code, which promotes the code into a separate handler class, carrying the separation-of.concerns principle even further. By reducing the amount of code that resides inside the controller, the command becomes even more important." pecoraro (2015): 67